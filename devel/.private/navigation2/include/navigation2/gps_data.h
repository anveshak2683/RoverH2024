// Generated by gencpp from file navigation2/gps_data.msg
// DO NOT EDIT!


#ifndef NAVIGATION2_MESSAGE_GPS_DATA_H
#define NAVIGATION2_MESSAGE_GPS_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation2
{
template <class ContainerAllocator>
struct gps_data_
{
  typedef gps_data_<ContainerAllocator> Type;

  gps_data_()
    : latitude(0.0)
    , longitude(0.0)  {
    }
  gps_data_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)  {
  (void)_alloc;
    }



   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;





  typedef boost::shared_ptr< ::navigation2::gps_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation2::gps_data_<ContainerAllocator> const> ConstPtr;

}; // struct gps_data_

typedef ::navigation2::gps_data_<std::allocator<void> > gps_data;

typedef boost::shared_ptr< ::navigation2::gps_data > gps_dataPtr;
typedef boost::shared_ptr< ::navigation2::gps_data const> gps_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation2::gps_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation2::gps_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigation2::gps_data_<ContainerAllocator1> & lhs, const ::navigation2::gps_data_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigation2::gps_data_<ContainerAllocator1> & lhs, const ::navigation2::gps_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigation2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navigation2::gps_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation2::gps_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation2::gps_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation2::gps_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation2::gps_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation2::gps_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation2::gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9aeb2245d9611f300beeb62a0151d3f3";
  }

  static const char* value(const ::navigation2::gps_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9aeb2245d9611f30ULL;
  static const uint64_t static_value2 = 0x0beeb62a0151d3f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation2::gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation2/gps_data";
  }

  static const char* value(const ::navigation2::gps_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation2::gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 latitude\n"
"float32 longitude\n"
;
  }

  static const char* value(const ::navigation2::gps_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation2::gps_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation2::gps_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation2::gps_data_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION2_MESSAGE_GPS_DATA_H
