// Generated by gencpp from file navigation2/auto.msg
// DO NOT EDIT!


#ifndef NAVIGATION2_MESSAGE_AUTO_H
#define NAVIGATION2_MESSAGE_AUTO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation2
{
template <class ContainerAllocator>
struct auto_
{
  typedef auto_<ContainerAllocator> Type;

  auto_()
    : arm(false)
    , latitude(0.0)
    , longitude(0.0)
    , setstage(0)
    , text()
    , aruco_coordinates()
    , reference()
    , msg_id(0)  {
    }
  auto_(const ContainerAllocator& _alloc)
    : arm(false)
    , latitude(0.0)
    , longitude(0.0)
    , setstage(0)
    , text(_alloc)
    , aruco_coordinates(_alloc)
    , reference(_alloc)
    , msg_id(0)  {
  (void)_alloc;
    }



   typedef uint8_t _arm_type;
  _arm_type arm;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef int8_t _setstage_type;
  _setstage_type setstage;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _aruco_coordinates_type;
  _aruco_coordinates_type aruco_coordinates;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _reference_type;
  _reference_type reference;

   typedef int8_t _msg_id_type;
  _msg_id_type msg_id;





  typedef boost::shared_ptr< ::navigation2::auto_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation2::auto_<ContainerAllocator> const> ConstPtr;

}; // struct auto_

typedef ::navigation2::auto_<std::allocator<void> > auto;

typedef boost::shared_ptr< ::navigation2::auto > autoPtr;
typedef boost::shared_ptr< ::navigation2::auto const> autoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation2::auto_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation2::auto_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigation2::auto_<ContainerAllocator1> & lhs, const ::navigation2::auto_<ContainerAllocator2> & rhs)
{
  return lhs.arm == rhs.arm &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.setstage == rhs.setstage &&
    lhs.text == rhs.text &&
    lhs.aruco_coordinates == rhs.aruco_coordinates &&
    lhs.reference == rhs.reference &&
    lhs.msg_id == rhs.msg_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigation2::auto_<ContainerAllocator1> & lhs, const ::navigation2::auto_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigation2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navigation2::auto_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation2::auto_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation2::auto_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation2::auto_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation2::auto_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation2::auto_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation2::auto_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fc9b7878baa2559a000819e683c677c";
  }

  static const char* value(const ::navigation2::auto_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fc9b7878baa2559ULL;
  static const uint64_t static_value2 = 0xa000819e683c677cULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation2::auto_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation2/auto";
  }

  static const char* value(const ::navigation2::auto_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation2::auto_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool arm\n"
"float32 latitude \n"
"float32 longitude\n"
"int8 setstage \n"
"string text\n"
"float32[] aruco_coordinates\n"
"string reference \n"
"int8 msg_id\n"
"\n"
;
  }

  static const char* value(const ::navigation2::auto_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation2::auto_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.setstage);
      stream.next(m.text);
      stream.next(m.aruco_coordinates);
      stream.next(m.reference);
      stream.next(m.msg_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct auto_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation2::auto_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation2::auto_<ContainerAllocator>& v)
  {
    s << indent << "arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "setstage: ";
    Printer<int8_t>::stream(s, indent + "  ", v.setstage);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
    s << indent << "aruco_coordinates[]" << std::endl;
    for (size_t i = 0; i < v.aruco_coordinates.size(); ++i)
    {
      s << indent << "  aruco_coordinates[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.aruco_coordinates[i]);
    }
    s << indent << "reference: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.reference);
    s << indent << "msg_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.msg_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION2_MESSAGE_AUTO_H
