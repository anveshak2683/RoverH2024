// Generated by gencpp from file navigation2/imu_angle.msg
// DO NOT EDIT!


#ifndef NAVIGATION2_MESSAGE_IMU_ANGLE_H
#define NAVIGATION2_MESSAGE_IMU_ANGLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation2
{
template <class ContainerAllocator>
struct imu_angle_
{
  typedef imu_angle_<ContainerAllocator> Type;

  imu_angle_()
    : Roll(0.0)
    , Pitch(0.0)
    , Yaw(0.0)  {
    }
  imu_angle_(const ContainerAllocator& _alloc)
    : Roll(0.0)
    , Pitch(0.0)
    , Yaw(0.0)  {
  (void)_alloc;
    }



   typedef float _Roll_type;
  _Roll_type Roll;

   typedef float _Pitch_type;
  _Pitch_type Pitch;

   typedef float _Yaw_type;
  _Yaw_type Yaw;





  typedef boost::shared_ptr< ::navigation2::imu_angle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation2::imu_angle_<ContainerAllocator> const> ConstPtr;

}; // struct imu_angle_

typedef ::navigation2::imu_angle_<std::allocator<void> > imu_angle;

typedef boost::shared_ptr< ::navigation2::imu_angle > imu_anglePtr;
typedef boost::shared_ptr< ::navigation2::imu_angle const> imu_angleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation2::imu_angle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation2::imu_angle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigation2::imu_angle_<ContainerAllocator1> & lhs, const ::navigation2::imu_angle_<ContainerAllocator2> & rhs)
{
  return lhs.Roll == rhs.Roll &&
    lhs.Pitch == rhs.Pitch &&
    lhs.Yaw == rhs.Yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigation2::imu_angle_<ContainerAllocator1> & lhs, const ::navigation2::imu_angle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigation2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navigation2::imu_angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation2::imu_angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation2::imu_angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation2::imu_angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation2::imu_angle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation2::imu_angle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation2::imu_angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8aec502c207f580f351d8f6036c0af0";
  }

  static const char* value(const ::navigation2::imu_angle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8aec502c207f580ULL;
  static const uint64_t static_value2 = 0xf351d8f6036c0af0ULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation2::imu_angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation2/imu_angle";
  }

  static const char* value(const ::navigation2::imu_angle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation2::imu_angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Roll\n"
"float32 Pitch\n"
"float32 Yaw\n"
;
  }

  static const char* value(const ::navigation2::imu_angle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation2::imu_angle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Roll);
      stream.next(m.Pitch);
      stream.next(m.Yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_angle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation2::imu_angle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation2::imu_angle_<ContainerAllocator>& v)
  {
    s << indent << "Roll: ";
    Printer<float>::stream(s, indent + "  ", v.Roll);
    s << indent << "Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Pitch);
    s << indent << "Yaw: ";
    Printer<float>::stream(s, indent + "  ", v.Yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION2_MESSAGE_IMU_ANGLE_H
